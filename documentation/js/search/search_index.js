var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.047,1,2.094]],["body/classes/AllExceptionsFilter.html",[0,0.021,1,1.953,2,0.688,3,0.149,4,0.131,5,0.131,6,1.188,7,1.968,8,1.953,9,0.188,10,0.886,11,2.597,12,3.014,13,3.014,14,3.014,15,0.817,16,4.027,17,1.968,18,2.354,19,0.962,20,1.42,21,3.503,22,1.97,23,0.865,24,1.42,25,1.812,26,0.032,27,1.67,28,0.865,29,1.32,30,1.726,31,2.196,32,1.42,33,3.052,34,4.963,35,3.381,36,5.39,37,1.374,38,2.354,39,3.505,40,4.436,41,1.343,42,4.189,43,3.71,44,3.216,45,4.337,46,2.912,47,2.354,48,4.189,49,2.445,50,2.354,51,4.436,52,1.42,53,1.953,54,3.505,55,4.189,56,4.815,57,4.641,58,2.554,59,1.42,60,2.932,61,1.715,62,2.354,63,1.968,64,4.436,65,2.354,66,2.932,67,3.505,68,1.42,69,2.354,70,2.354,71,4.189,72,1.525,73,2.354,74,1.968,75,2.354,76,2.354,77,2.354,78,1.455,79,1.968,80,2.354,81,1.42,82,1.715,83,2.06,84,1.968,85,2.354,86,2.354,87,1.968,88,2.354,89,2.354,90,0.759,91,4.258,92,2.354,93,1.42,94,2.354,95,0.44,96,1.525,97,1.953,98,0.277,99,0.58,100,0.92,101,2.354,102,2.521,103,0.92,104,0.149,105,1.14,106,2.52,107,1.967,108,1.42,109,1.42,110,1.42,111,1.42,112,1.42,113,1.42,114,1.42,115,1.42,116,1.188,117,1.42,118,1.188,119,1.42,120,1.42,121,1.42,122,1.42,123,1.42,124,3.014,125,1.42,126,1.42,127,3.014,128,1.42,129,1.42,130,2.521,131,0.631,132,1.035,133,1.188,134,2.521,135,1.42,136,1.715,137,1.525,138,1.968,139,1.525,140,1.525,141,2.354,142,1.42,143,1.968,144,1.343,145,1.188,146,3.505,147,2.354,148,2.354,149,1.42,150,2.521,151,1.42,152,0.829,153,1.42,154,1.42,155,1.42,156,1.42,157,1.42,158,1.188,159,1.42,160,1.42,161,3.014,162,0.92,163,0.011,164,0.011]],["title/controllers/AppController.html",[165,1.565,166,2.094]],["body/controllers/AppController.html",[0,0.064,3,0.463,4,0.406,5,0.406,9,0.583,15,1.865,23,0.86,26,0.031,37,1.589,78,1.532,95,0.564,98,0.86,104,0.463,105,2.136,144,1.414,163,0.025,164,0.025,165,2.601,166,3.48,167,2.136,168,3.688,169,5.04,170,1.802,171,4.41,172,3.07,173,3.688,174,3.212,175,4.41]],["title/modules/AppModule.html",[176,1.216,177,2.094]],["body/modules/AppModule.html",[0,0.046,3,0.333,4,0.292,5,0.292,8,2.811,26,0.032,95,0.662,98,0.618,99,1.296,104,0.333,163,0.021,164,0.021,166,3.205,167,2.101,172,3.048,173,2.652,176,1.633,177,4.204,178,1.409,179,2.101,180,2.652,181,2.652,182,2.652,183,3.356,184,2.785,185,3.048,186,3.356,187,2.349,188,3.048,189,1.997,190,2.532,191,1.851,192,1.851,193,3.171,194,2.532,195,2.811,196,3.171,197,2.652,198,3.171,199,3.171,200,3.171,201,3.171,202,3.171,203,4.339,204,3.171,205,3.171,206,3.171,207,3.171,208,3.171,209,3.171,210,1.681,211,3.171]],["title/injectables/AppService.html",[172,1.713,212,0.749]],["body/injectables/AppService.html",[0,0.066,3,0.48,4,0.421,5,0.421,9,0.604,15,1.906,23,0.891,26,0.031,37,1.624,78,1.587,95,0.48,98,0.891,104,0.48,144,1.465,163,0.026,164,0.026,169,5.101,172,2.909,212,1.271,213,2.03,214,3.821,215,4.569,216,4.569,217,4.569]],["title/controllers/AuthController.html",[165,1.565,218,2.094]],["body/controllers/AuthController.html",[0,0.039,3,0.178,4,0.157,5,0.157,9,0.225,11,1.514,15,0.946,19,0.694,22,1.514,23,0.832,25,1.744,26,0.032,27,1.607,28,0.888,29,1.607,35,3.835,41,1.368,43,4.824,44,2.952,46,2.549,49,2.659,78,1.782,79,1.42,82,1.983,83,1.443,90,1.437,95,0.599,98,0.331,99,0.694,104,0.178,105,1.651,106,2.409,107,1.744,131,2.279,132,1.237,144,1.25,152,1.589,163,0.013,164,0.013,165,0.822,167,0.822,170,1.744,187,1.392,189,1.184,218,1.764,219,1.42,220,1.42,221,1.237,222,4.555,223,1.283,224,4.16,225,1.983,226,3.261,227,2.527,228,1.698,229,2.527,230,3.408,231,1.698,232,2.208,233,1.698,234,2.277,235,4.268,236,2.723,237,1.025,238,1.732,239,3.835,240,5.264,241,1.698,242,1.698,243,1.698,244,3.223,245,3.899,246,3.899,247,3.261,248,3.261,249,0.991,250,4.974,251,4.974,252,4.16,253,1.698,254,1.698,255,1.698,256,3.101,257,2.723,258,1.983,259,2.723,260,1.589,261,1.983,262,1.42,263,2.276,264,1.698,265,1.698,266,2.85,267,1.983,268,1.698,269,3.899,270,1.698,271,1.698,272,1.764,273,3.899,274,1.698,275,1.698,276,3.899,277,1.698,278,1.698,279,0.9,280,2.723,281,2.723,282,3.408,283,1.698,284,0.991,285,1.698,286,1.42,287,1.698,288,1.698,289,0.991,290,1.1,291,0.822,292,1.42,293,0.822,294,1.698,295,2.527,296,1.698,297,2.723,298,1.1,299,1.025,300,1.1,301,1.698,302,1.698,303,1.698,304,2.723,305,1.698,306,1.698,307,1.698,308,1.698,309,1.698,310,1.698,311,3.408,312,1.698,313,1.698,314,1.698,315,3.899,316,2.723,317,2.723,318,2.723,319,1.42,320,1.698,321,1.698,322,1.698,323,1.698,324,1.698,325,1.698,326,3.408,327,1.698,328,1.698,329,1.698,330,1.698,331,2.723,332,1.698,333,1.698,334,0.754,335,1.698,336,1.698,337,2.723,338,1.698,339,1.698,340,1.698]],["title/modules/AuthModule.html",[176,1.216,183,1.886]],["body/modules/AuthModule.html",[0,0.043,3,0.312,4,0.274,5,0.274,22,2.296,26,0.032,95,0.659,98,0.579,99,1.213,100,1.923,104,0.312,136,2.162,163,0.02,164,0.02,167,2.007,176,1.56,178,1.318,179,2.007,183,3.748,184,2.728,185,2.986,187,2.528,188,2.986,189,1.957,190,2.419,191,1.732,192,1.732,194,2.419,195,3.094,197,3.466,218,3.094,223,1.117,279,1.573,289,1.732,290,1.923,341,2.482,342,2.968,343,2.482,344,2.482,345,3.288,346,3.288,347,2.968,348,2.685,349,4.144,350,4.144,351,2.482,352,2.968,353,2.685,354,2.968,355,2.968,356,3.479,357,2.968,358,2.968,359,2.968,360,2.968,361,2.968,362,2.968,363,1.732,364,2.162,365,2.482,366,2.968,367,2.482,368,2.968]],["title/injectables/AuthService.html",[187,1.32,212,0.749]],["body/injectables/AuthService.html",[0,0.019,3,0.139,4,0.122,5,0.122,9,0.175,11,1.657,15,0.769,16,1.852,17,1.852,19,0.905,21,3.589,22,1.906,23,0.913,25,1.839,26,0.032,27,1.695,28,0.913,29,1.695,33,1.613,35,0.962,37,1.759,41,1.376,44,2.17,45,1.613,46,1.622,53,2.17,60,1.852,61,1.613,63,2.801,78,1.802,82,1.613,83,3.033,84,1.852,90,1.56,95,0.508,96,2.617,97,0.856,98,0.257,99,0.539,100,0.856,102,1.852,104,0.139,105,1.622,106,2.078,107,1.913,116,1.104,131,1.906,133,1.852,136,1.613,137,1.435,138,1.104,139,1.435,140,1.435,144,1.376,145,1.852,152,2.178,162,2.418,163,0.011,164,0.014,187,1.368,189,1.49,212,0.513,213,0.586,223,1.954,224,1.852,226,2.392,227,1.854,234,2.801,237,1.405,238,0.984,239,1.613,244,3.524,248,1.852,249,1.67,252,1.852,256,1.854,258,0.962,260,1.293,261,2.084,262,1.104,263,1.67,266,1.104,267,2.44,272,1.435,286,1.104,289,0.771,291,2.078,292,1.104,293,2.406,319,3.765,334,1.906,363,0.771,367,1.852,369,1.104,370,2.861,371,3.349,372,2.215,373,2.215,374,2.215,375,2.215,376,2.215,377,1.32,378,2.44,379,2.275,380,1.32,381,2.215,382,2.215,383,3.731,384,1.32,385,2.215,386,4.486,387,3.349,388,2.215,389,1.32,390,2.215,391,2.215,392,2.215,393,2.215,394,2.215,395,2.215,396,1.32,397,2.801,398,3.349,399,2.617,400,2.215,401,1.32,402,1.104,403,2.215,404,1.32,405,3.349,406,3.349,407,3.133,408,4.039,409,3.349,410,1.32,411,1.32,412,2.215,413,1.32,414,2.215,415,1.32,416,2.215,417,1.104,418,1.32,419,1.104,420,1.32,421,1.32,422,2.215,423,1.32,424,2.215,425,1.852,426,2.215,427,1.32,428,1.488,429,1.32,430,1.104,431,1.852,432,1.32,433,1.32,434,2.215,435,0.856,436,0.771,437,0.771,438,1.32,439,1.613,440,1.32,441,1.32,442,1.32,443,1.32,444,1.852,445,1.32,446,1.104,447,1.104,448,1.104,449,1.32,450,1.32,451,1.32,452,1.32,453,1.32,454,1.32,455,1.32,456,1.32,457,1.32,458,1.32,459,1.32,460,1.32,461,1.32,462,2.215,463,1.104,464,1.32,465,0.962,466,2.215,467,2.215,468,2.215,469,1.613,470,0.856,471,2.215,472,2.215,473,1.32,474,2.215,475,1.32,476,3.349,477,1.32,478,1.32,479,1.32,480,2.215]],["title/classes/CreateUserDto.html",[0,0.047,481,2.094]],["body/classes/CreateUserDto.html",[0,0.071,2,1.848,3,0.401,4,0.352,5,0.352,9,0.505,10,1.847,23,1.154,26,0.031,28,1.154,30,1.695,37,1.847,95,0.401,104,0.515,163,0.023,164,0.023,170,2.419,237,2.041,238,2.408,428,2.179,481,3.513,482,3.191,483,3.95,484,3.513,485,3.513,486,5.722,487,3.816,488,3.816,489,3.816,490,3.816,491,3.816,492,3.816,493,3.179,494,3.536,495,3.455,496,2.023]],["title/modules/DatabaseModule.html",[176,1.216,184,1.565]],["body/modules/DatabaseModule.html",[0,0.068,3,0.494,4,0.434,5,0.434,26,0.031,95,0.587,98,0.918,104,0.494,163,0.027,164,0.027,176,2.103,178,2.092,184,2.705,194,2.748,348,3.051,497,4.709,498,4.339,499,4.709]],["title/injectables/JwtRefreshStrategy.html",[212,0.749,345,1.886]],["body/injectables/JwtRefreshStrategy.html",[0,0.061,3,0.318,4,0.279,5,0.279,9,0.4,11,1.866,15,1.459,19,1.716,22,2.582,23,0.819,25,1.716,26,0.032,27,1.582,28,0.819,29,1.582,46,2.87,49,2.816,78,1.051,90,1.312,95,0.61,98,0.59,99,1.236,103,1.961,104,0.441,105,2.034,107,1.716,137,1.961,139,1.961,140,1.961,144,1.347,163,0.02,164,0.02,189,1.969,210,1.604,212,0.973,213,1.344,223,1.817,225,3.06,256,3.378,258,2.205,279,1.604,289,1.766,299,1.139,300,1.961,334,1.344,345,2.452,399,1.961,435,2.722,465,2.205,469,3.515,470,3.127,500,4.035,501,2.531,502,3.515,503,2.531,504,3.026,505,4.201,506,3.026,507,2.531,508,3.989,509,3.127,510,3.515,511,3.026,512,3.513,513,2.531,514,2.205,515,3.026,516,2.205,517,3.026,518,3.515,519,2.531,520,2.531,521,2.205,522,2.531,523,2.531,524,3.026,525,2.531,526,1.961,527,3.026,528,2.531,529,3.026,530,3.026,531,3.026,532,3.026]],["title/injectables/JwtStrategy.html",[188,1.713,212,0.749]],["body/injectables/JwtStrategy.html",[0,0.061,3,0.318,4,0.279,5,0.279,9,0.4,11,1.866,15,1.459,19,1.716,22,2.582,23,0.819,25,1.716,26,0.032,27,1.582,28,0.819,29,1.582,41,0.97,46,2.652,49,1.766,53,2.722,78,1.051,87,3.513,90,1.378,95,0.595,98,0.59,99,1.236,103,1.961,104,0.441,105,2.034,106,2.034,107,1.236,134,2.531,137,1.961,139,1.961,140,1.961,144,1.671,150,3.513,163,0.02,164,0.02,188,2.558,189,1.969,212,0.973,213,1.344,221,3.06,223,1.817,244,2.722,249,1.766,261,2.205,279,1.604,289,1.766,334,1.344,365,2.531,465,2.205,469,2.205,470,3.127,502,3.515,503,2.531,507,2.531,508,3.515,509,3.127,510,2.205,512,3.513,513,2.531,514,3.797,516,3.06,518,3.515,519,2.531,520,2.531,521,2.205,522,2.531,523,2.531,525,2.531,526,1.961,528,2.531,533,2.531,534,4.201,535,4.201,536,4.201,537,4.201,538,3.026,539,4.201,540,3.026,541,3.026,542,3.026,543,3.513,544,3.026,545,3.026,546,3.026]],["title/injectables/LocalStrategy.html",[212,0.749,346,1.886]],["body/injectables/LocalStrategy.html",[0,0.07,3,0.392,4,0.344,5,0.344,9,0.494,15,1.68,19,1.526,23,0.943,25,1.976,26,0.031,27,1.821,28,0.943,29,1.821,37,1.783,78,1.297,95,0.632,98,0.728,104,0.392,144,1.197,163,0.023,164,0.023,174,2.72,187,2.461,212,1.121,213,1.659,223,2.02,237,1.821,238,2.521,249,2.179,279,1.98,290,2.419,298,2.419,299,1.406,334,1.659,346,2.823,502,3.524,508,2.72,509,2.419,510,2.72,518,2.72,521,2.72,543,3.123,547,3.123,548,3.734,549,3.734,550,4.837,551,3.734,552,3.123,553,3.734,554,3.734,555,3.734,556,3.734]],["title/classes/LoginUserDto.html",[0,0.047,232,2.094]],["body/classes/LoginUserDto.html",[0,0.07,2,1.803,3,0.391,4,0.343,5,0.343,9,0.493,10,1.818,23,0.942,26,0.031,28,0.942,30,1.654,37,1.678,41,1.548,58,3.518,90,1.427,95,0.507,104,0.507,163,0.023,164,0.023,170,1.973,232,3.472,237,2.212,238,2.722,260,3.513,284,2.174,428,1.654,493,3.129,494,3.128,495,2.818,496,1.974,557,3.114,558,3.114,559,3.724,560,3.114,561,4.038,562,4.038,563,4.038,564,4.038,565,4.038,566,4.038,567,4.038,568,3.114,569,3.724,570,3.904,571,2.713,572,3.114,573,3.114,574,3.114]],["title/modules/MailModule.html",[176,1.216,185,1.713]],["body/modules/MailModule.html",[0,0.058,3,0.418,4,0.367,5,0.367,22,2.238,26,0.031,72,2.579,95,0.63,98,0.776,99,1.626,104,0.418,163,0.024,164,0.024,176,1.897,178,1.768,179,2.44,185,3.298,190,2.941,191,2.323,192,2.323,194,2.941,195,3.265,348,3.265,363,2.323,364,2.899,379,3.433,575,3.329,576,3.329,577,3.329,578,3.98,579,3.98,580,3.671,581,3.98,582,3.98,583,2.899,584,3.98]],["title/injectables/MailService.html",[212,0.749,379,1.713]],["body/injectables/MailService.html",[0,0.042,3,0.302,4,0.265,5,0.265,9,0.38,15,1.408,19,1.175,23,0.915,25,1.918,26,0.032,27,1.767,28,0.915,29,1.767,41,1.3,72,1.863,78,1.408,90,1.59,95,0.493,98,0.561,104,0.302,106,2.274,107,1.656,152,3.472,163,0.019,164,0.019,174,2.095,212,0.939,213,1.277,223,2.099,227,2.627,237,2.295,247,3.39,272,3.303,299,2.157,300,1.863,334,2.085,379,2.149,417,3.39,428,2.085,431,3.39,484,3.303,485,3.303,583,2.095,585,2.405,586,4.054,587,4.054,588,2.876,589,5.576,590,2.876,591,4.054,592,2.876,593,5.098,594,5.098,595,4.054,596,5.576,597,4.054,598,2.876,599,4.054,600,4.054,601,4.054,602,2.876,603,4.054,604,3.39,605,3.39,606,4.054,607,2.876,608,2.405,609,4.054]],["title/classes/RegisterUserDto.html",[0,0.047,263,1.886]],["body/classes/RegisterUserDto.html",[0,0.065,2,1.605,3,0.348,4,0.306,5,0.306,9,0.439,10,1.683,23,1.056,26,0.031,27,2.039,28,1.056,30,1.473,37,1.792,41,1.736,58,3.257,90,1.524,95,0.469,104,0.469,163,0.021,164,0.021,170,2.213,237,2.129,238,2.645,260,3.4,263,2.953,284,1.935,428,1.473,447,3.739,484,3.278,485,3.278,493,2.897,494,3.3,495,3.161,496,1.757,558,2.772,560,2.772,561,3.739,562,3.739,563,3.739,564,3.739,565,3.739,566,3.739,567,3.739,568,2.772,570,4.119,571,2.415,572,2.772,573,2.772,574,2.772,610,2.772,611,3.315,612,3.739,613,3.315,614,4.471,615,3.315,616,3.315]],["title/classes/RequestWithUserDto.html",[0,0.047,229,2.094]],["body/classes/RequestWithUserDto.html",[0,0.078,2,2.156,3,0.467,4,0.41,5,0.41,9,0.589,10,2.034,23,0.868,26,0.031,28,0.868,30,1.978,90,1.464,95,0.567,104,0.567,163,0.026,164,0.026,170,1.819,229,3.768,299,2.189,493,2.885,494,3.394,495,2.599,496,2.36,617,3.723,618,4.452,619,3.723]],["title/entities/RoleEntity.html",[437,1.886,620,1.713]],["body/entities/RoleEntity.html",[0,0.059,3,0.425,4,0.373,5,0.373,9,0.536,10,1.918,23,1.087,26,0.031,28,1.087,37,1.508,83,2.955,90,1.517,95,0.535,104,0.425,163,0.024,164,0.024,170,2.277,291,2.699,299,2.202,300,2.624,428,2.263,436,2.364,437,2.974,620,2.147,621,2.364,622,3.387,623,6.028,624,4.05,625,4.05,626,5.094,627,4.05,628,4.05,629,5.094,630,4.05]],["title/guards/RolesGuard.html",[295,2.094,631,2.354]],["body/guards/RolesGuard.html",[0,0.046,3,0.331,4,0.29,5,0.29,7,2.634,9,0.417,11,1.918,15,1.5,19,1.764,23,0.842,25,1.764,26,0.032,27,1.626,28,0.842,29,1.626,41,1.01,46,2.091,74,3.612,78,1.5,90,1.24,95,0.583,96,2.798,97,2.041,98,0.614,104,0.331,105,1.525,106,1.525,107,2.166,131,1.399,144,1.385,162,2.041,163,0.02,164,0.02,187,2.401,210,2.613,212,1,223,1.855,290,2.041,291,2.091,293,1.525,295,2.798,334,1.399,435,2.798,514,3.146,516,3.146,605,4.434,632,3.15,633,2.634,634,5.302,635,3.15,636,5.738,637,3.15,638,4.318,639,5.302,640,3.15,641,4.928,642,4.318,643,4.928,644,4.318,645,5.555,646,2.295,647,3.15,648,3.15,649,2.634,650,4.318,651,3.15,652,3.15,653,3.15,654,3.15,655,3.15,656,3.15,657,3.15,658,3.15,659,3.15]],["title/controllers/UserController.html",[165,1.565,660,2.094]],["body/controllers/UserController.html",[0,0.07,3,0.508,4,0.446,5,0.446,26,0.03,90,1.218,95,0.508,98,0.944,104,0.508,163,0.027,164,0.027,165,2.344,167,2.344,220,4.048,660,3.679,661,4.048,662,4.84]],["title/entities/UserEntity.html",[299,1.216,620,1.713]],["body/entities/UserEntity.html",[0,0.054,3,0.271,4,0.238,5,0.238,9,0.341,10,1.411,11,1.962,23,1.176,26,0.032,28,1.197,29,1.825,30,2.388,37,1.801,95,0.464,104,0.271,130,4.055,131,1.145,132,3.753,144,0.826,163,0.018,164,0.018,170,2.463,210,2.731,237,1.663,238,1.962,291,1.815,293,2.139,298,1.67,299,1.411,407,2.861,428,1.665,436,1.504,437,2.83,483,3.217,484,2.861,485,2.861,526,1.67,620,1.366,621,1.504,663,2.155,664,4.416,665,3.693,666,4.416,667,3.693,668,3.693,669,3.747,670,4.416,671,2.577,672,3.747,673,4.849,674,2.577,675,2.577,676,2.577,677,2.577,678,5.09,679,2.577,680,3.747,681,2.577,682,4.849,683,3.747,684,2.577,685,2.577,686,2.577,687,2.577,688,2.577,689,2.577,690,2.577,691,2.577,692,2.577,693,2.577,694,5.547,695,2.577,696,2.577,697,3.747,698,3.747,699,2.577,700,2.577,701,3.747,702,2.577,703,2.577,704,2.577,705,2.577,706,2.577]],["title/modules/UserModule.html",[176,1.216,186,1.886]],["body/modules/UserModule.html",[0,0.058,3,0.424,4,0.372,5,0.372,26,0.031,95,0.632,98,0.787,104,0.424,163,0.024,164,0.024,167,2.463,176,1.914,178,1.794,179,2.463,184,2.978,186,3.685,189,2.136,190,2.968,191,2.357,192,2.357,194,2.968,195,3.295,348,2.616,351,3.377,353,3.607,660,3.607,707,4.038,708,4.038,709,4.038,710,4.038,711,4.038,712,4.038,713,4.038]],["title/injectables/UserService.html",[189,1.122,212,0.749]],["body/injectables/UserService.html",[0,0.021,3,0.155,4,0.136,5,0.136,9,0.196,11,1.597,15,0.846,19,0.995,23,0.954,25,1.998,26,0.032,27,1.841,28,1.006,29,1.841,33,3.114,37,1.774,41,1.449,44,3.532,45,2.62,53,1.579,78,1.919,83,3.103,90,1.59,91,1.238,95,0.417,96,2.011,97,0.96,98,0.289,104,0.155,106,2.438,107,1.846,131,1.899,144,1.513,162,1.579,163,0.012,164,0.012,189,0.846,210,2.107,212,0.564,213,0.658,223,2.245,225,3.114,227,2.33,237,1.777,239,2.62,249,2.637,256,3.059,260,1.422,272,1.579,293,1.18,299,1.496,334,2.172,363,0.864,378,2.62,386,3.948,397,2.037,399,2.77,402,2.037,407,3.581,419,2.037,430,2.037,435,1.579,436,1.812,439,1.775,446,3.008,448,2.037,463,1.238,470,3.059,481,2.33,483,1.079,571,2.62,619,1.238,620,1.292,621,1.422,665,2.596,667,2.596,668,2.037,678,2.037,714,1.238,715,2.436,716,2.436,717,2.436,718,3.104,719,2.436,720,2.436,721,2.436,722,1.481,723,1.481,724,2.436,725,2.436,726,1.481,727,2.436,728,2.436,729,2.436,730,2.436,731,2.436,732,1.481,733,2.436,734,1.481,735,1.481,736,1.481,737,3.008,738,3.596,739,3.596,740,2.436,741,1.481,742,2.436,743,1.481,744,4.518,745,4.72,746,2.436,747,4.72,748,2.436,749,1.481,750,2.436,751,2.436,752,2.436,753,2.436,754,2.436,755,2.436,756,2.436,757,2.436,758,1.481,759,2.436,760,2.436,761,1.481,762,1.481,763,3.104,764,2.436,765,2.436,766,1.481,767,1.481,768,1.481,769,1.481,770,1.481,771,3.104,772,1.481,773,1.481,774,2.436,775,1.481,776,1.481,777,1.481]],["title/classes/VerifyUserDto.html",[0,0.047,778,2.354]],["body/classes/VerifyUserDto.html",[0,0.073,2,1.917,3,0.416,4,0.365,5,0.365,9,0.523,10,1.89,23,0.979,26,0.031,28,0.979,30,1.758,37,1.486,41,1.61,46,2.432,83,2.924,90,1.264,95,0.527,104,0.527,152,3.494,163,0.024,164,0.024,170,2.051,237,1.89,284,2.31,407,3.253,428,2.23,494,3.219,495,2.931,496,2.098,570,4.018,612,3.31,737,4.199,778,4.018,779,3.31,780,3.957,781,4.199,782,5.021,783,5.021,784,3.957,785,3.957,786,5.021]],["title/coverage.html",[787,3.201]],["body/coverage.html",[0,0.083,1,2.014,5,0.286,6,2.599,8,2.014,26,0.031,28,0.606,61,2.264,131,1.38,163,0.02,164,0.02,165,2.37,166,2.014,168,2.599,172,1.647,187,1.27,188,1.647,189,1.079,212,1.356,214,2.599,218,2.014,219,2.599,229,2.014,232,2.014,263,1.814,293,1.505,295,2.014,299,1.17,345,1.814,346,1.814,353,2.014,356,2.264,369,2.599,379,1.647,437,1.814,444,5.429,481,2.014,482,2.599,498,2.264,500,2.599,501,2.599,533,2.599,547,2.599,557,2.599,580,2.264,585,2.599,610,2.599,617,2.599,620,2.268,622,2.599,631,2.264,633,2.599,646,2.264,660,2.014,661,2.599,663,2.599,714,2.599,778,2.264,779,2.599,787,2.264,788,3.107,789,3.107,790,3.107,791,2.599,792,5.964,793,2.599,794,6.237,795,3.107,796,3.107,797,4.893,798,3.107,799,3.107,800,3.107,801,3.107,802,5.272,803,2.599,804,3.578,805,4.278,806,4.278,807,2.599,808,2.599,809,2.599,810,3.107,811,3.107,812,2.599,813,2.599,814,3.107,815,3.107,816,2.599,817,3.107,818,3.107,819,3.107,820,3.107]],["title/dependencies.html",[179,1.88,821,2.263]],["body/dependencies.html",[0,0.073,26,0.032,49,2.31,72,2.564,98,0.772,99,1.617,100,2.564,103,2.564,163,0.024,164,0.024,179,1.917,244,2.564,279,2.098,284,2.31,298,2.564,436,2.31,439,2.883,496,2.098,509,3.573,552,3.31,583,2.883,649,3.31,822,3.957,823,5.515,824,3.957,825,3.957,826,3.957,827,3.957,828,3.957,829,3.957,830,3.957,831,3.957,832,3.957,833,3.957,834,3.957,835,3.957,836,3.957,837,3.957,838,3.957,839,3.957,840,3.957,841,3.957,842,3.957,843,3.957,844,3.957,845,3.957,846,3.957,847,3.957,848,3.957,849,3.957,850,3.957,851,3.957,852,3.957,853,3.957,854,3.957,855,3.957]],["title/miscellaneous/enumerations.html",[856,1.434,857,3.246]],["body/miscellaneous/enumerations.html",[9,0.638,26,0.03,31,4.383,163,0.027,164,0.027,291,2.744,856,2.557,857,4.034,858,4.823,859,4.823,860,5.666,861,5.666,862,5.666]],["title/miscellaneous/functions.html",[856,1.434,863,3.246]],["body/miscellaneous/functions.html",[9,0.663,26,0.028,163,0.028,164,0.028,812,4.194,813,5.113,856,2.658,863,4.194,864,5.015]],["title/index.html",[9,0.358,865,2.706,866,2.706]],["body/index.html",[4,0.355,26,0.031,41,1.234,118,3.218,163,0.023,164,0.023,378,2.803,425,3.218,608,3.218,787,2.803,867,3.848,868,3.848,869,4.932,870,3.848,871,3.848,872,3.848,873,3.848,874,3.848,875,5.443,876,3.848,877,3.848,878,3.848,879,6.174,880,3.848,881,3.848,882,3.848,883,6.072,884,3.848,885,3.848,886,4.932,887,3.848,888,3.848,889,3.848,890,3.848,891,4.932,892,4.932,893,3.848,894,3.848,895,3.848,896,4.932,897,4.932,898,3.848,899,3.848,900,3.848,901,3.848,902,3.848,903,3.218,904,3.848,905,3.848,906,3.848,907,3.848,908,3.848,909,3.848,910,3.848,911,3.848,912,3.218,913,3.848,914,3.848,915,3.848,916,3.848,917,3.848,918,3.848,919,3.218]],["title/modules.html",[178,1.952]],["body/modules.html",[26,0.027,163,0.027,164,0.027,177,3.061,178,2.099,183,2.758,184,2.288,185,2.505,186,2.758,903,5.158,920,6.167,921,6.167,922,6.295,923,4.725,924,4.725]],["title/overview.html",[925,3.675]],["body/overview.html",[2,1.661,26,0.031,143,2.868,163,0.022,164,0.022,167,1.661,172,2.729,177,4.214,178,1.523,179,2.215,180,2.868,181,2.868,182,2.868,183,3.796,184,2.77,185,3.184,186,3.506,187,2.493,188,2.911,189,1.987,190,2.67,191,2.002,192,2.002,213,1.523,341,2.868,343,2.868,344,2.868,345,3.004,346,3.004,379,3.184,575,2.868,576,2.868,577,2.868,621,2.002,631,2.499,925,2.868,926,3.43,927,3.43,928,3.43,929,3.43,930,3.43]],["title/properties.html",[10,1.461,821,2.263]],["body/properties.html",[10,1.868,26,0.031,41,1.591,163,0.027,164,0.027,912,4.149,919,4.149,931,4.961,932,4.961,933,4.961]],["title/miscellaneous/variables.html",[856,1.434,934,3.246]],["body/miscellaneous/variables.html",[1,1.863,8,2.627,9,0.38,22,2.387,26,0.032,28,1.117,30,2.599,31,4.263,37,1.2,66,2.405,90,0.724,107,1.175,131,1.801,144,1.3,158,2.405,163,0.019,164,0.019,210,2.149,221,2.095,223,1.083,238,1.277,267,2.095,291,1.393,293,2.603,353,2.627,356,2.953,363,2.74,364,3.42,399,1.863,498,2.953,526,3.042,580,2.953,604,2.405,621,1.679,646,2.953,781,2.405,791,2.405,793,3.39,803,2.405,804,2.405,807,2.405,808,2.405,809,2.405,816,2.405,856,1.525,934,2.405,935,2.876,936,2.876,937,2.876,938,2.876,939,4.054,940,2.876,941,2.876,942,5.098,943,4.695,944,5.576,945,2.876,946,2.876,947,2.876,948,2.876,949,2.876,950,2.876,951,2.876,952,2.876,953,2.876,954,2.876,955,2.876,956,2.876,957,2.876,958,2.876,959,2.876,960,4.054,961,2.876,962,2.876,963,4.054,964,4.054,965,2.876,966,2.876,967,2.876,968,2.876,969,2.876,970,2.876,971,2.876,972,2.876,973,2.876,974,2.876,975,2.876,976,2.876,977,2.876,978,2.876,979,2.876,980,2.876,981,2.876,982,2.876,983,2.876]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":932,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":794,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":797,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":815,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":143,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"overview.html":{}}}],["1.0.0",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":806,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":770,"title":{},"body":{"injectables/UserService.html":{}}}],["10.0.1",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":928,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":811,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["2fa",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["3",{"_index":927,"title":{},"body":{"overview.html":{}}}],["33",{"_index":805,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":926,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":799,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":930,"title":{},"body":{"overview.html":{}}}],["6.1.4",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["6.9.1",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":796,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":929,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":795,"title":{},"body":{"coverage.html":{}}}],["8/10",{"_index":801,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":800,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":562,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["9.0.0",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":514,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["access_token",{"_index":84,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["access_token_expiry",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["accesstokencookie",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["account",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{},"injectables/UserService.html":{}}}],["accounts",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["activates",{"_index":750,"title":{},"body":{"injectables/UserService.html":{}}}],["adapter",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":519,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["address",{"_index":783,"title":{},"body":{"classes/VerifyUserDto.html":{}}}],["admin",{"_index":860,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["allow",{"_index":513,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["amazing",{"_index":904,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["apicookieauth",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":570,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/VerifyUserDto.html":{}}}],["apitags",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('authentication",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":881,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":173,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":166,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":874,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":177,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":172,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arguments",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["argumentshost",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["assign",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["assigned",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["assigns",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["attached",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["attempt",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":355,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{}}}],["auth/auth.module",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/strategies/jwt.strategy",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["authconfirmtoken",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["authcontroller",{"_index":218,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":82,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authenticates",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["authentication=${token",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":183,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":912,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorize",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["authorized",{"_index":645,"title":{},"body":{"guards/RolesGuard.html":{}}}],["authservice",{"_index":187,"title":{"injectables/AuthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":924,"title":{},"body":{"modules.html":{}}}],["await",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":905,"title":{},"body":{"index.html":{}}}],["base64",{"_index":139,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["based",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":769,"title":{},"body":{"injectables/UserService.html":{}}}],["bearer",{"_index":536,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":751,"title":{},"body":{"injectables/UserService.html":{}}}],["beforeupdate",{"_index":697,"title":{},"body":{"entities/UserEntity.html":{}}}],["body",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.userid",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":682,"title":{},"body":{"entities/UserEntity.html":{}}}],["bootstrap",{"_index":813,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":922,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":920,"title":{},"body":{"modules.html":{}}}],["buffer.from",{"_index":137,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["building",{"_index":870,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":634,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":638,"title":{},"body":{"guards/RolesGuard.html":{}}}],["capital",{"_index":564,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["catch",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["catch(exception",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["character",{"_index":567,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["check",{"_index":739,"title":{},"body":{"injectables/UserService.html":{}}}],["checks",{"_index":516,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"classes/VerifyUserDto.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"classes/VerifyUserDto.html":{},"overview.html":{}}}],["client's",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":341,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":343,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":342,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":575,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":577,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":576,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":707,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_imports",{"_index":708,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":709,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":152,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{},"classes/VerifyUserDto.html":{}}}],["codes",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":678,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["column()@exclude",{"_index":688,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({default",{"_index":683,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({nullable",{"_index":669,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({type",{"_index":672,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({unique",{"_index":676,"title":{},"body":{"entities/UserEntity.html":{}}}],["config.yaml",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/.../configuration.ts",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/configuration",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["config/configuration.ts",{"_index":791,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('db.mysql.host",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('db.mysql.password",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('db.mysql.port",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('db.mysql.username",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('jwt.accesstoken.expires')}s",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt.accesstoken.secret",{"_index":365,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt.refreshtoken.secret",{"_index":529,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["configservice.get('mail.email",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('mail.password",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":609,"title":{},"body":{"injectables/MailService.html":{}}}],["confirmation",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["confirmed",{"_index":603,"title":{},"body":{"injectables/MailService.html":{}}}],["const",{"_index":107,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":548,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(jwtservice",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["constructor(mailerservice",{"_index":588,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(private",{"_index":174,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{}}}],["constructor(reflector",{"_index":635,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolerepository",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userrepository",{"_index":722,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":503,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["contain",{"_index":563,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["contains",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"guards/RolesGuard.html":{}}}],["context",{"_index":605,"title":{},"body":{"injectables/MailService.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":653,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":652,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":654,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":165,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":662,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":167,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["cookies",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["coverage",{"_index":787,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":715,"title":{},"body":{"injectables/UserService.html":{}}}],["create(userdata",{"_index":725,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":730,"title":{},"body":{"injectables/UserService.html":{}}}],["createdat",{"_index":664,"title":{},"body":{"entities/UserEntity.html":{}}}],["creates",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":481,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["credential",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["ctx",{"_index":108,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getrequest",{"_index":111,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":110,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["current",{"_index":738,"title":{},"body":{"injectables/UserService.html":{}}}],["current_timestamp",{"_index":673,"title":{},"body":{"entities/UserEntity.html":{}}}],["currenthashedrefreshtoken",{"_index":665,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["custom",{"_index":512,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["customer",{"_index":861,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["data",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["data_source",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["database.providers",{"_index":499,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":184,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":498,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(roleentity",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(userentity",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.initialize",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":132,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"entities/UserEntity.html":{}}}],["decorators",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"classes/VerifyUserDto.html":{}}}],["default",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/UserEntity.html":{},"classes/VerifyUserDto.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{}}}],["dependencies",{"_index":179,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"index.html":{},"properties.html":{}}}],["detects",{"_index":94,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["development",{"_index":882,"title":{},"body":{"index.html":{}}}],["dir",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":788,"title":{},"body":{"coverage.html":{}}}],["dto/createuser.dto",{"_index":761,"title":{},"body":{"injectables/UserService.html":{}}}],["e",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":893,"title":{},"body":{"index.html":{}}}],["ecom",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":871,"title":{},"body":{"index.html":{}}}],["email",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{}}}],["emails",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["endpoints",{"_index":542,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["entities",{"_index":621,"title":{},"body":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":620,"title":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{}},"body":{"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entity('role",{"_index":630,"title":{},"body":{"entities/RoleEntity.html":{}}}],["entity('user",{"_index":699,"title":{},"body":{"entities/UserEntity.html":{}}}],["entity{.ts,.js",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":857,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["err",{"_index":161,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["error",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["errorlog",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errormessage",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errorresponse",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errors",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["exception.getresponse",{"_index":114,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":113,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":115,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack",{"_index":154,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exceptionfilter.provider",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["exceptions",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exclude",{"_index":694,"title":{},"body":{"entities/UserEntity.html":{}}}],["execution",{"_index":644,"title":{},"body":{"guards/RolesGuard.html":{}}}],["executioncontext",{"_index":639,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":765,"title":{},"body":{"injectables/UserService.html":{}}}],["expired",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["expiresin",{"_index":367,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":104,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{}}}],["exports",{"_index":348,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":103,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":518,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":507,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":545,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":523,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromurlqueryparameter('token",{"_index":544,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":526,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":685,"title":{},"body":{"entities/UserEntity.html":{}}}],["field",{"_index":753,"title":{},"body":{"injectables/UserService.html":{}}}],["fields",{"_index":756,"title":{},"body":{"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"coverage.html":{}}}],["files",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["filter",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["first",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{}}}],["firstname",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"entities/UserEntity.html":{}}}],["flag",{"_index":760,"title":{},"body":{"injectables/UserService.html":{}}}],["formatted",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["foundentity",{"_index":776,"title":{},"body":{"injectables/UserService.html":{}}}],["framework",{"_index":869,"title":{},"body":{"index.html":{}}}],["fs",{"_index":101,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["fs.appendfile",{"_index":157,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["fullname",{"_index":606,"title":{},"body":{"injectables/MailService.html":{}}}],["function",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["functions",{"_index":863,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('logout",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["getauthenticateduser",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["getauthenticateduser(email",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["getauthenticateduser(request",{"_index":80,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["getcookiesforlogout",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["geterrorlog",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["geterrorresponse",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["gethello",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getonebyemail",{"_index":716,"title":{},"body":{"injectables/UserService.html":{}}}],["getonebyemail(email",{"_index":731,"title":{},"body":{"injectables/UserService.html":{}}}],["getonebyid",{"_index":717,"title":{},"body":{"injectables/UserService.html":{}}}],["getonebyid(userid",{"_index":733,"title":{},"body":{"injectables/UserService.html":{}}}],["getpassword",{"_index":705,"title":{},"body":{"entities/UserEntity.html":{}}}],["getroles",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["getroles(userid",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["gets",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["getting",{"_index":865,"title":{"index.html":{}},"body":{}}],["gettokenerror",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["gettokenerror(request",{"_index":92,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["getuserifrefreshtokenmatches",{"_index":718,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":735,"title":{},"body":{"injectables/UserService.html":{}}}],["given",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["gmail",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":923,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":900,"title":{},"body":{"index.html":{}}}],["guard",{"_index":631,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":632,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handlebarsadapter",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handler",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hashed",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["hbs",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["header",{"_index":537,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hello",{"_index":216,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["here",{"_index":909,"title":{},"body":{"index.html":{}}}],["host",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":109,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcode",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":96,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["httponly",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":916,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":97,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.forbidden",{"_index":659,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpstatus.internal_server_error",{"_index":116,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["httpstatus.not_found",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["httpstatus.unauthorized",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{}}}],["identifier",{"_index":789,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":525,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":95,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{}}}],["imports",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["incoming",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{}}}],["inject",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["inject('role_repository",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject('user_repository",{"_index":762,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":212,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":213,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["installation",{"_index":878,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":880,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":112,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["internal",{"_index":117,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["isactive",{"_index":666,"title":{},"body":{"entities/UserEntity.html":{}}}],["isemail",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{}}}],["isemail()@isnotempty",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@apiproperty({description",{"_index":558,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isglobal",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"classes/VerifyUserDto.html":{}}}],["isnumber",{"_index":786,"title":{},"body":{"classes/VerifyUserDto.html":{}}}],["isnumber()@isnotempty()@apiproperty({description",{"_index":780,"title":{},"body":{"classes/VerifyUserDto.html":{}}}],["ispasswordmatching",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["isrefreshtokenmatching",{"_index":774,"title":{},"body":{"injectables/UserService.html":{}}}],["isstring",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"classes/VerifyUserDto.html":{}}}],["isstring()@isnotempty",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":612,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/VerifyUserDto.html":{}}}],["isstring()@minlength(8)@isnotempty()@matches(/^(?=.*[a",{"_index":560,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isverified",{"_index":667,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["join",{"_index":907,"title":{},"body":{"index.html":{}}}],["js",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":755,"title":{},"body":{"injectables/UserService.html":{}}}],["jutrefreshstrategy",{"_index":511,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["jwt",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.accesstoken.expires",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt.refreshtoken.expires",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtfromrequest",{"_index":522,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":349,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshstrategy",{"_index":345,"title":{"injectables/JwtRefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":188,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":913,"title":{},"body":{"index.html":{}}}],["last",{"_index":614,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["lastname",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"entities/UserEntity.html":{}}}],["letter",{"_index":565,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["license",{"_index":919,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":897,"title":{},"body":{"index.html":{}}}],["list",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["literal",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["load",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":552,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":346,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["logic",{"_index":520,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["login",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@req",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":232,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["logout",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(request",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["mail.factory",{"_index":581,"title":{},"body":{"modules/MailModule.html":{}}}],["mail.from",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mail.service",{"_index":579,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["mailconfigfactory",{"_index":580,"title":{},"body":{"modules/MailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mailermodule",{"_index":582,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":584,"title":{},"body":{"modules/MailModule.html":{}}}],["maileroptions",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mailerservice",{"_index":589,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":185,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":379,"title":{"injectables/MailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["malformed",{"_index":88,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["manytoone",{"_index":629,"title":{},"body":{"entities/RoleEntity.html":{}}}],["manytoone(undefined",{"_index":625,"title":{},"body":{"entities/RoleEntity.html":{}}}],["mapped",{"_index":517,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["match",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":571,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/^(?=.*[a",{"_index":574,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["matching",{"_index":164,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["memberof",{"_index":145,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["message",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["metadata",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["methods",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":572,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["minlength(8",{"_index":573,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["miscellaneous",{"_index":856,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":896,"title":{},"body":{"index.html":{}}}],["mode",{"_index":886,"title":{},"body":{"index.html":{}}}],["module",{"_index":176,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":178,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":583,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["more",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["morgan",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["mysql",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":914,"title":{},"body":{"index.html":{}}}],["n",{"_index":156,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["n${tokenerror?.stack",{"_index":155,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["name",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":875,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":918,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":98,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":99,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":649,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":100,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/VerifyUserDto.html":{},"dependencies.html":{}}}],["new",{"_index":131,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":766,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":868,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["notifies",{"_index":593,"title":{},"body":{"injectables/MailService.html":{}}}],["npm",{"_index":879,"title":{},"body":{"index.html":{}}}],["nresponse",{"_index":151,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["null",{"_index":91,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":701,"title":{},"body":{"entities/UserEntity.html":{}}}],["number",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"classes/VerifyUserDto.html":{}}}],["number'})@apiproperty({description",{"_index":568,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["obj",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["object",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["obtain",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["og",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ok",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["old",{"_index":746,"title":{},"body":{"injectables/UserService.html":{}}}],["one",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{}}}],["onetomany",{"_index":698,"title":{},"body":{"entities/UserEntity.html":{}}}],["onetomany(undefined",{"_index":690,"title":{},"body":{"entities/UserEntity.html":{}}}],["open",{"_index":898,"title":{},"body":{"index.html":{}}}],["optional",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["options",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overriding",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["overview",{"_index":925,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":862,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["package",{"_index":821,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":106,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["parsed",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["parser",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passed",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["passport",{"_index":509,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":350,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":510,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":543,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":527,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["password",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":102,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["path.join(__dirname",{"_index":158,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["path=/api/auth/refresh",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":532,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["permissions",{"_index":658,"title":{},"body":{"guards/RolesGuard.html":{}}}],["plaintext",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["plaintoclass",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["plaintoclass(userentity",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["plaintoclassfromexist",{"_index":554,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["please",{"_index":608,"title":{},"body":{"injectables/MailService.html":{},"index.html":{}}}],["port",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@httpcode(200",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('verify",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('verify')@httpcode(200",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["present",{"_index":86,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["primarycolumn",{"_index":623,"title":{},"body":{"entities/RoleEntity.html":{}}}],["primarygeneratedcolumn",{"_index":696,"title":{},"body":{"entities/UserEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":680,"title":{},"body":{"entities/UserEntity.html":{}}}],["private",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["privilege",{"_index":642,"title":{},"body":{"guards/RolesGuard.html":{}}}],["privileges",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["prod",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":888,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":867,"title":{},"body":{"index.html":{}}}],["project",{"_index":899,"title":{},"body":{"index.html":{}}}],["promise",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"classes/VerifyUserDto.html":{},"properties.html":{}}}],["provide",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["providers",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["query",{"_index":535,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["read",{"_index":908,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":105,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["received",{"_index":85,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["reflect",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":636,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refresh",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/UserService.html":{}}}],["refresh.strategy",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{}}}],["refresh.strategy.ts",{"_index":501,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:22",{"_index":504,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh.strategy.ts:41",{"_index":506,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh=${refresh_token",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshing",{"_index":515,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refreshtoken",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/UserService.html":{}}}],["refreshtoken(@req",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(request",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokencookie",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["register",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registrationdata",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registered",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["registers",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["registeruserdto",{"_index":263,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["rejectunauthorized",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["relations",{"_index":764,"title":{},"body":{"injectables/UserService.html":{}}}],["remove",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["removerefreshtoken",{"_index":719,"title":{},"body":{"injectables/UserService.html":{}}}],["removerefreshtoken(userid",{"_index":740,"title":{},"body":{"injectables/UserService.html":{}}}],["replace/clear",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["reply",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/VerifyUserDto.html":{}}}],["request.cookies?.refresh",{"_index":530,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["request.method",{"_index":129,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.url",{"_index":128,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.user.id",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["request?.cookies?.authentication",{"_index":134,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/JwtStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":524,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["request?.headers?.authentication",{"_index":141,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request?.headers?.authentication.split",{"_index":149,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["requestuser",{"_index":124,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["requestwithuserdto",{"_index":229,"title":{"classes/RequestWithUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RequestWithUserDto.html":{},"coverage.html":{}}}],["required",{"_index":541,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["requiredroles",{"_index":650,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.includes(role",{"_index":657,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resource",{"_index":643,"title":{},"body":{"guards/RolesGuard.html":{}}}],["response",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{}}}],["response.send",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.sendstatus(200",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.setheader('set",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(status).json(errorresponse",{"_index":123,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["results",{"_index":163,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":144,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["returns",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["role",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.customer",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.enum",{"_index":648,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.role",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.user",{"_index":704,"title":{},"body":{"entities/UserEntity.html":{}}}],["role.user)@exclude",{"_index":691,"title":{},"body":{"entities/UserEntity.html":{}}}],["role_repository",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roleentity",{"_index":437,"title":{"entities/RoleEntity.html":{}},"body":{"injectables/AuthService.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["roleproviders",{"_index":356,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolerepository",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.customer",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["roles(role.customer)@useguards(undefined",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["roles.decorator",{"_index":647,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.length",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.map((role",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.some((role",{"_index":656,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/role.entity",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles/role.enum",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["roles/role.provider",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{}}}],["roles/roles.decorator",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["roles/roles.guard",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["roles[i",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles_key",{"_index":646,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":295,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@apicookieauth()@apibearerauth()@get('logout",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["rolesguard)@apicookieauth()@get('refresh",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["rolesguard)@post('login')@apibody({type",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":883,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":729,"title":{},"body":{"injectables/UserService.html":{}}}],["saves",{"_index":727,"title":{},"body":{"injectables/UserService.html":{}}}],["scalable",{"_index":872,"title":{},"body":{"index.html":{}}}],["secret",{"_index":136,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":528,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["secure",{"_index":781,"title":{},"body":{"classes/VerifyUserDto.html":{},"miscellaneous/variables.html":{}}}],["send",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"injectables/MailService.html":{}}}],["sendconfirmationemail",{"_index":586,"title":{},"body":{"injectables/MailService.html":{}}}],["sendconfirmationemail(user",{"_index":591,"title":{},"body":{"injectables/MailService.html":{}}}],["sendconfirmedemail",{"_index":587,"title":{},"body":{"injectables/MailService.html":{}}}],["sendconfirmedemail(user",{"_index":597,"title":{},"body":{"injectables/MailService.html":{}}}],["sends",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["sent",{"_index":782,"title":{},"body":{"classes/VerifyUserDto.html":{}}}],["server",{"_index":118,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["service",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["session",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["set",{"_index":754,"title":{},"body":{"injectables/UserService.html":{}}}],["setcurrentrefreshtoken",{"_index":720,"title":{},"body":{"injectables/UserService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":742,"title":{},"body":{"injectables/UserService.html":{}}}],["setmetadata(roles_key",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setroles",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["setroles(userid",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["setting",{"_index":759,"title":{},"body":{"injectables/UserService.html":{}}}],["setupdatedat",{"_index":702,"title":{},"body":{"entities/UserEntity.html":{}}}],["side",{"_index":873,"title":{},"body":{"index.html":{}}}],["signed",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":366,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"index.html":{}}}],["special",{"_index":566,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["specified",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["sponsors",{"_index":902,"title":{},"body":{"index.html":{}}}],["src/.../database.providers.ts",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exceptionfilter.provider.ts",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mail.factory.ts",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":864,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":858,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.provider.ts",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.provider.ts",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/allexceptionsfilter.ts",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/allexceptionsfilter.ts:111",{"_index":81,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/allexceptionsfilter.ts:138",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/allexceptionsfilter.ts:15",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/allexceptionsfilter.ts:157",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/allexceptionsfilter.ts:25",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/allexceptionsfilter.ts:61",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/allexceptionsfilter.ts:80",{"_index":93,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/app.controller.ts",{"_index":168,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":171,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":214,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":215,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:105",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:121",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:47",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:61",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:74",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":347,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:114",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:13",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:143",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:164",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:187",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:44",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:56",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/verifyaccount.dto",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/dto/verifyaccount.dto.ts",{"_index":779,"title":{},"body":{"classes/VerifyUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/verifyaccount.dto.ts:10",{"_index":784,"title":{},"body":{"classes/VerifyUserDto.html":{}}}],["src/auth/dto/verifyaccount.dto.ts:15",{"_index":785,"title":{},"body":{"classes/VerifyUserDto.html":{}}}],["src/auth/roles/role.entity",{"_index":695,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/auth/roles/role.entity.ts",{"_index":622,"title":{},"body":{"entities/RoleEntity.html":{},"coverage.html":{}}}],["src/auth/roles/role.entity.ts:10",{"_index":624,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/auth/roles/role.entity.ts:13",{"_index":627,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/auth/roles/role.entity.ts:7",{"_index":628,"title":{},"body":{"entities/RoleEntity.html":{}}}],["src/auth/roles/role.enum.ts",{"_index":859,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/roles/role.provider.ts",{"_index":803,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles/roles.decorator.ts",{"_index":804,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles/roles.guard.ts",{"_index":633,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/roles/roles.guard.ts:14",{"_index":637,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles/roles.guard.ts:25",{"_index":640,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/strategies/jwt",{"_index":500,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":533,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:16",{"_index":538,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:38",{"_index":540,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":547,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:15",{"_index":551,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:9",{"_index":549,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/database/database.module",{"_index":351,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["src/database/database.module.ts",{"_index":497,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.providers.ts",{"_index":807,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exceptionfilter.provider.ts",{"_index":808,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/logs/error.log",{"_index":159,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/mail/mail.factory.ts",{"_index":809,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mail/mail.module",{"_index":352,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/mail/mail.module.ts",{"_index":578,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/mail/mail.service.ts",{"_index":585,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:13",{"_index":598,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:31",{"_index":592,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:6",{"_index":590,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/templates",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":812,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/dto/createuser.dto.ts",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/createuser.dto.ts:10",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/createuser.dto.ts:14",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/createuser.dto.ts:18",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/createuser.dto.ts:22",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/createuser.dto.ts:6",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/loginuser.dto",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/user/dto/loginuser.dto.ts",{"_index":557,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/user/dto/loginuser.dto.ts:14",{"_index":559,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["src/user/dto/loginuser.dto.ts:24",{"_index":569,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["src/user/dto/registeruser.dto",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/user/dto/registeruser.dto.ts",{"_index":610,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/user/dto/registeruser.dto.ts:14",{"_index":611,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["src/user/dto/registeruser.dto.ts:19",{"_index":613,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["src/user/dto/registeruser.dto.ts:24",{"_index":615,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["src/user/dto/registeruser.dto.ts:34",{"_index":616,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["src/user/dto/requestwithuser.dto",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/user/dto/requestwithuser.dto.ts",{"_index":617,"title":{},"body":{"classes/RequestWithUserDto.html":{},"coverage.html":{}}}],["src/user/dto/requestwithuser.dto.ts:6",{"_index":618,"title":{},"body":{"classes/RequestWithUserDto.html":{}}}],["src/user/user.controller.ts",{"_index":661,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.entity",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/MailService.html":{},"entities/RoleEntity.html":{}}}],["src/user/user.entity.ts",{"_index":663,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:14",{"_index":681,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:17",{"_index":677,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:21",{"_index":689,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:24",{"_index":679,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:27",{"_index":687,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:31",{"_index":684,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:34",{"_index":674,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:37",{"_index":693,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:41",{"_index":686,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:45",{"_index":671,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:49",{"_index":675,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.entity.ts:58",{"_index":692,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/user.module.ts",{"_index":710,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.provider",{"_index":354,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.provider.ts",{"_index":816,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.service",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["src/user/user.service.ts",{"_index":714,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:119",{"_index":749,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:126",{"_index":741,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":734,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":732,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:61",{"_index":726,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":743,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:8",{"_index":723,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:84",{"_index":758,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:97",{"_index":736,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":884,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":887,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":889,"title":{},"body":{"index.html":{}}}],["started",{"_index":866,"title":{"index.html":{}},"body":{}}],["starter",{"_index":877,"title":{},"body":{"index.html":{}}}],["statements",{"_index":790,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["statuscode",{"_index":127,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["stay",{"_index":910,"title":{},"body":{"index.html":{}}}],["strategies/jwt",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":508,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strict",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["subject",{"_index":601,"title":{},"body":{"injectables/MailService.html":{}}}],["success",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["successful",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["successfully",{"_index":599,"title":{},"body":{"injectables/MailService.html":{}}}],["sufficient",{"_index":641,"title":{},"body":{"guards/RolesGuard.html":{}}}],["super",{"_index":521,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":903,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":921,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":604,"title":{},"body":{"injectables/MailService.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":892,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":895,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":894,"title":{},"body":{"index.html":{}}}],["tests",{"_index":891,"title":{},"body":{"index.html":{}}}],["thank",{"_index":602,"title":{},"body":{"injectables/MailService.html":{}}}],["thanks",{"_index":901,"title":{},"body":{"index.html":{}}}],["thats",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.appservice.gethello",{"_index":175,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.getauthenticateduser(email",{"_index":556,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.getcookiesforlogout",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getcookiewithjwtaccesstoken",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getcookiewithjwtrefreshtoken(user.id",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getroles(user.id",{"_index":655,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.authservice.register(registrationdata",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyaccount(body.code",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt.accesstoken.expires",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt.accesstoken.secret",{"_index":138,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["this.configservice.get('jwt.refreshtoken.secret",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getauthenticateduser(request",{"_index":125,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.geterrorlog",{"_index":121,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.geterrorresponse(status",{"_index":120,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.getonebyid(userid",{"_index":773,"title":{},"body":{"injectables/UserService.html":{}}}],["this.gettokenerror(request",{"_index":119,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.decode",{"_index":147,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.sign(payload",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(request?.cookies?.authentication",{"_index":135,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.verify(request?.headers?.authentication.split",{"_index":142,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.mailerservice.sendmail",{"_index":600,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendconfirmedemail(user",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":706,"title":{},"body":{"entities/UserEntity.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":651,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolerepository.find",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.setroles(user.id",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatedat",{"_index":703,"title":{},"body":{"entities/UserEntity.html":{}}}],["this.updatehelper(userid",{"_index":771,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.create(userdata",{"_index":767,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":763,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":768,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(object.assign(foundentity",{"_index":777,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.getonebyemail(email",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getonebyid(payload.userid",{"_index":546,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.getonebyid(userid",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":531,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["this.userservice.removerefreshtoken(request.user.id",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.setcurrentrefreshtoken(refresh_token",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.verify(user.id",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.writeerrorlogtofile(errorlog",{"_index":122,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["threw",{"_index":89,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["throw",{"_index":162,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["throws",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":130,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/UserEntity.html":{}}}],["timestamp}\\n",{"_index":153,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["tls",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["tokendecoded",{"_index":146,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["tokendecoded['userid",{"_index":148,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["tokenerror",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["tokenexpiry",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokenexpiry.getseconds",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokenexpiry.setseconds",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokenexpiry.tostring",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["tostring",{"_index":140,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":911,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"entities/UserEntity.html":{},"dependencies.html":{}}}],["transport",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigger",{"_index":752,"title":{},"body":{"injectables/UserService.html":{}}}],["true",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtRefreshStrategy.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["true})@exclude",{"_index":670,"title":{},"body":{"entities/UserEntity.html":{}}}],["try",{"_index":133,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["twitter",{"_index":917,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":876,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":126,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["undefined",{"_index":772,"title":{},"body":{"injectables/UserService.html":{}}}],["unique",{"_index":700,"title":{},"body":{"entities/UserEntity.html":{}}}],["unit",{"_index":890,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":933,"title":{},"body":{"properties.html":{}}}],["unsuccessful",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":745,"title":{},"body":{"injectables/UserService.html":{}}}],["updated",{"_index":747,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedat",{"_index":668,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["updatehelper",{"_index":721,"title":{},"body":{"injectables/UserService.html":{}}}],["updatehelper(userid",{"_index":748,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":744,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":150,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/JwtStrategy.html":{}}}],["use",{"_index":595,"title":{},"body":{"injectables/MailService.html":{}}}],["useclass",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["used",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["usefactory",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{},"modules/MailModule.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('jwt",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('local",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":90,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":737,"title":{},"body":{"injectables/UserService.html":{},"classes/VerifyUserDto.html":{}}}],["user.authconfirmtoken",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.controller",{"_index":711,"title":{},"body":{"modules/UserModule.html":{}}}],["user.currenthashedrefreshtoken",{"_index":775,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":619,"title":{},"body":{"classes/RequestWithUserDto.html":{},"injectables/UserService.html":{}}}],["user.getpassword",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.isactive",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["user.provider",{"_index":712,"title":{},"body":{"modules/UserModule.html":{}}}],["user.roles",{"_index":626,"title":{},"body":{"entities/RoleEntity.html":{}}}],["user.service",{"_index":713,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.entity",{"_index":553,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["user/user.module",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["user_repository",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":660,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":728,"title":{},"body":{"injectables/UserService.html":{}}}],["userentity",{"_index":299,"title":{"entities/UserEntity.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/RequestWithUserDto.html":{},"entities/RoleEntity.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":83,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/RoleEntity.html":{},"injectables/UserService.html":{},"classes/VerifyUserDto.html":{}}}],["usermodule",{"_index":186,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":555,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userproviders",{"_index":353,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":724,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":189,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["utf8",{"_index":160,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["valid",{"_index":87,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/JwtStrategy.html":{}}}],["validate",{"_index":502,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":550,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":539,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":505,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["validator",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RequestWithUserDto.html":{},"classes/VerifyUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":792,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":934,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["verified",{"_index":596,"title":{},"body":{"injectables/MailService.html":{}}}],["verifies",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["verify",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{},"injectables/UserService.html":{}}}],["verify(@body",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify(body",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify(userid",{"_index":757,"title":{},"body":{"injectables/UserService.html":{}}}],["verifyaccount",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyaccount(code",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyaccountdto",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyuserdto",{"_index":778,"title":{"classes/VerifyUserDto.html":{}},"body":{"classes/VerifyUserDto.html":{},"coverage.html":{}}}],["version",{"_index":931,"title":{},"body":{"properties.html":{}}}],["via",{"_index":594,"title":{},"body":{"injectables/MailService.html":{}}}],["void",{"_index":79,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{}}}],["watch",{"_index":885,"title":{},"body":{"index.html":{}}}],["website",{"_index":915,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":607,"title":{},"body":{"injectables/MailService.html":{}}}],["whether",{"_index":534,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["world",{"_index":217,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["writeerrorlogtofile",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["written",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["wrong",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["yaml",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["yaml_config_filename",{"_index":793,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["you'd",{"_index":906,"title":{},"body":{"index.html":{}}}],["z])(?=.*[!@#$%^&*])(?=.*[0",{"_index":561,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["zoom",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/allExceptionsFilter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getErrorLog\n                            \n                            \n                                    Private\n                                getErrorResponse\n                            \n                            \n                                    Private\n                                writeErrorLogToFile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getAuthenticatedUser\n                            \n                            \n                                    Private\n                                getTokenError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/allExceptionsFilter.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorLog\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/allExceptionsFilter.ts:138\n                        \n                    \n\n            \n                \n                    Gets a parsed error log string thats written to log files.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    errorResponse\n                                                    \n                                                            parsed response obj of exception\n\n                                                    \n                                            \n                                            \n                                                    request\n                                                    \n                                                            request obj og exception\n\n                                                    \n                                            \n                                            \n                                                    exception\n                                                    \n                                                            exception obj\n\n                                                    \n                                            \n                                            \n                                                    tokenError\n                                                    \n                                                            any jwt related errors\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/allExceptionsFilter.ts:61\n                        \n                    \n\n            \n                \n                    Gets a parsed response object for incoming exceptions\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    status\n                                                    \n                                                            status of exception\n\n                                                    \n                                            \n                                            \n                                                    errorMessage\n                                                    \n                                                            message of exception\n\n                                                    \n                                            \n                                            \n                                                    request\n                                                    \n                                                            request obj of exception\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        writeErrorLogToFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/allExceptionsFilter.ts:157\n                        \n                    \n\n            \n                \n                    A helper function to write log strings to log files\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    errorLog\n                                                    \n                                                            the parsed log string to be written to log files\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/allExceptionsFilter.ts:25\n                \n            \n\n\n            \n                \n                    Overriding the default exceptions filter catch method in Nestjs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the incoming exception of any type, no type specified in the catch\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        contains helper arguments to be passed to the handler\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(request)\n                \n            \n\n\n            \n                \n                    Defined in src/allExceptionsFilter.ts:111\n                \n            \n\n\n            \n                \n                    Gets the authenticated userId if the access_token received is present, valid, and not malformed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe request that threw an exception\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nthe userId of the request user or null\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getTokenError\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenError(request: any)\n                \n            \n\n\n            \n                \n                    Defined in src/allExceptionsFilter.ts:80\n                \n            \n\n\n            \n                \n                    Detects any errors from jwt exceptions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request obj of exception\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        jwt errors or null\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { Response, Request } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n  /**\n   * Overriding the default exceptions filter catch method in Nestjs\n   * @param exception the incoming exception of any type, no type specified in the catch\n   * @param host contains helper arguments to be passed to the handler\n   */\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    let status: HttpStatus;\n    let errorMessage: any;\n\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      errorMessage =\n        (exception.getResponse() as { message: string }).message ||\n        exception.message;\n    } else {\n      status = HttpStatus.INTERNAL_SERVER_ERROR;\n      errorMessage = 'Internal Server Error';\n    }\n    const tokenError = this.getTokenError(request);\n    const errorResponse = this.getErrorResponse(status, errorMessage, request);\n    const errorLog = this.getErrorLog(\n      errorResponse,\n      request,\n      exception,\n      tokenError,\n    );\n    this.writeErrorLogToFile(errorLog);\n    response.status(status).json(errorResponse);\n  }\n\n  /**\n   * Gets a parsed response object for incoming exceptions\n   * @private\n   * @param status status of exception\n   * @param errorMessage message of exception\n   * @param request request obj of exception\n   * @returns parsed response object\n   */\n  private getErrorResponse = (\n    status: HttpStatus,\n    errorMessage: any,\n    request: Request,\n  ) => ({\n    requestUser: this.getAuthenticatedUser(request) || 'Unauthenticated User',\n    statusCode: status,\n    error: errorMessage,\n    path: request.url,\n    method: request.method,\n    timeStamp: new Date(),\n  });\n\n  /**\n   * Detects any errors from jwt exceptions\n   * @private\n   * @param request the request obj of exception\n   * @returns jwt errors or null\n   */\n  private getTokenError(request: any) {\n    try {\n      if (request?.cookies?.Authentication != null)\n        this.jwtService.verify(request?.cookies?.Authentication, {\n          secret: Buffer.from(\n            this.configService.get('jwt.accessToken.secret'),\n            'base64',\n          ).toString(),\n        });\n\n      if (request?.headers?.authentication != null)\n        this.jwtService.verify(request?.headers?.authentication.split(' ')[1], {\n          secret: Buffer.from(\n            this.configService.get('jwt.accessToken.secret'),\n            'base64',\n          ).toString(),\n        });\n\n      return null; //no errors\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Gets the authenticated userId if the access_token received is present, valid, and not malformed.\n   * @private\n   * @param {*} request - the request that threw an exception\n   * @return {*} - the userId of the request user or null\n   * @memberof AllExceptionsFilter\n   */\n  private getAuthenticatedUser(request) {\n    if (request?.cookies?.Authentication != null) {\n      let tokenDecoded = this.jwtService.decode(\n        request?.cookies?.Authentication,\n      );\n\n      return tokenDecoded ? tokenDecoded['userId'] : null;\n    }\n\n    if (request?.headers?.authentication != null) {\n      let tokenDecoded = this.jwtService.decode(\n        request?.headers?.authentication.split(' ')[1],\n      );\n\n      return tokenDecoded ? tokenDecoded['userId'] : null;\n    }\n  }\n\n  /**\n   * Gets a parsed error log string thats written to log files.\n   * @private\n   * @param errorResponse parsed response obj of exception\n   * @param request request obj og exception\n   * @param exception exception obj\n   * @param tokenError any jwt related errors\n   * @returns a parsed log string for log files\n   */\n  private getErrorLog = (\n    errorResponse: any,\n    request: Request,\n    exception: any,\n    tokenError: any,\n  ): string => {\n    const { statusCode, error, requestUser, timeStamp } = errorResponse;\n    const { method, url } = request;\n    const errorLog = `\\nResponse Code: ${statusCode} | Method: ${method} | URL: ${url} | UserId: ${requestUser} | TimeStamp: ${timeStamp}\\n${\n      exception.stack || error\n    }\\n${tokenError?.stack ?? ''}${tokenError ? '\\n' : ''}`;\n    return errorLog;\n  };\n\n  /**\n   * A helper function to write log strings to log files\n   * @private\n   * @param errorLog the parsed log string to be written to log files\n   */\n  private writeErrorLogToFile = (errorLog: string): void => {\n    fs.appendFile(\n      path.join(__dirname, '../../src/logs/error.log'),\n      errorLog,\n      'utf8',\n      (err) => {\n        if (err) throw err;\n      },\n    );\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAppModule -->\n\nJwtStrategy->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { DatabaseModule } from './database/database.module';\nimport { AuthService } from './auth/auth.service';\nimport { UserService } from './user/user.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\nimport configuration from '../config/configuration';\nimport { JwtStrategy } from './auth/strategies/jwt.strategy';\nimport { exceptionFilter } from './exceptionFilter.provider';\nimport { MailModule } from './mail/mail.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true, load: [configuration] }),\n    DatabaseModule,\n    AuthModule,\n    UserModule,\n    MailModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    AuthService,\n    UserService,\n    JwtStrategy,\n    ...exceptionFilter,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                refreshToken\n                            \n                            \n                                register\n                            \n                            \n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(req: RequestWithUserDto, response: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.customer)@UseGuards(undefined, RolesGuard)@Post('login')@ApiBody({type: LoginUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:74\n                \n            \n\n\n            \n                \n                    Login a user with login credentials,\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                RequestWithUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plaintext email and password\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the authenticated user obj, throws error if unsuccessful\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(request: any, response: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.customer)@UseGuards(undefined, RolesGuard)@ApiCookieAuth()@ApiBearerAuth()@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:105\n                \n            \n\n\n            \n                \n                    Logout a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        jwt cookie must be attached in request to authorize logout\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        response obj to send logout cookies\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        200 Ok if successful, throws error if unsuccessful\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \nrefreshToken(request: any, response: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.customer)@UseGuards(undefined, RolesGuard)@ApiCookieAuth()@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:121\n                \n            \n\n\n            \n                \n                    Refresh a user session from expired jwt to obtain new one\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        jwt refresh cookie must be attached in request to authorize refresh\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        response obj to send new authentication cookies\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        200 Ok if successful, throws error if unsuccessful\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(registrationData: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:47\n                \n            \n\n\n            \n                \n                    Register a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        username and password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        200 Ok if successful, throws error if unsuccessful\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verify\n                        \n                    \n                \n            \n            \n                \nverify(body: VerifyAccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('verify')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:61\n                \n            \n\n\n            \n                \n                    Verify a new user account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            VerifyAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        code and userId\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        200 Ok if successful, throws error if unsuccessful\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiCookieAuth,\n  ApiTags,\n} from '@nestjs/swagger';\nimport LoginUserDto from 'src/user/dto/loginUser.dto';\nimport RegisterUserDto from 'src/user/dto/registerUser.dto';\nimport VerifyAccountDto from 'src/auth/dto/VerifyAccount.dto';\nimport RequestWithUserDto from 'src/user/dto/requestWithUser.dto';\nimport { UserService } from 'src/user/user.service';\nimport { AuthService } from './auth.service';\nimport { Role } from './roles/role.enum';\nimport { Roles } from './roles/roles.decorator';\nimport { RolesGuard } from './roles/roles.guard';\nimport { plainToClass } from 'class-transformer';\nimport { UserEntity } from 'src/user/user.entity';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * Register a new user\n   * @param registrationData username and password\n   * @returns 200 Ok if successful, throws error if unsuccessful\n   */\n  @Post('register')\n  @HttpCode(200)\n  register(@Body() registrationData: RegisterUserDto) {\n    return plainToClass(\n      UserEntity,\n      this.authService.register(registrationData),\n    );\n  }\n\n  /**\n   * Verify a new user account\n   * @param body code and userId\n   * @returns 200 Ok if successful, throws error if unsuccessful\n   */\n  @Post('verify')\n  @HttpCode(200)\n  verify(@Body() body: VerifyAccountDto) {\n    return this.authService.verifyAccount(body.code, body.userId);\n  }\n\n  /**\n   * Login a user with login credentials,\n   * @param req plaintext email and password\n   * @param response the authenticated user obj, throws error if unsuccessful\n   */\n  @Roles(Role.customer)\n  @UseGuards(AuthGuard('local'), RolesGuard)\n  @Post('login')\n  @ApiBody({ type: LoginUserDto })\n  login(@Req() req: RequestWithUserDto, @Res() response: any) {\n    const { user } = req;\n    const accessTokenCookie = this.authService.getCookieWithJwtAccessToken(\n      user.id,\n    );\n    const { cookie: refreshTokenCookie, refresh_token } =\n      this.authService.getCookieWithJwtRefreshToken(user.id);\n    this.userService.setCurrentRefreshToken(refresh_token, user.id);\n    const tokenExpiry = new Date();\n    tokenExpiry.setSeconds(\n      tokenExpiry.getSeconds() +\n        this.configService.get('jwt.accessToken.expires'),\n    );\n    response.setHeader('set-cookie', [accessTokenCookie, refreshTokenCookie]);\n    response.send({\n      user: plainToClass(UserEntity, user),\n      access_token_expiry: tokenExpiry.toString(),\n    });\n  }\n\n  /**\n   * Logout a user\n   * @param request jwt cookie must be attached in request to authorize logout\n   * @param response response obj to send logout cookies\n   * @returns 200 Ok if successful, throws error if unsuccessful\n   */\n  @Roles(Role.customer)\n  @UseGuards(AuthGuard('jwt'), RolesGuard)\n  @ApiCookieAuth()\n  @ApiBearerAuth()\n  @Get('logout')\n  async logout(@Req() request: any, @Res() response: any) {\n    await this.userService.removeRefreshToken(request.user.id);\n    response.setHeader('set-cookie', this.authService.getCookiesForLogOut());\n    return response.sendStatus(200);\n  }\n\n  /**\n   * Refresh a user session from expired jwt to obtain new one\n   * @param request jwt refresh cookie must be attached in request to authorize refresh\n   * @param response response obj to send new authentication cookies\n   * @returns 200 Ok if successful, throws error if unsuccessful\n   */\n  @Roles(Role.customer)\n  @UseGuards(AuthGuard('jwt-refresh'), RolesGuard)\n  @ApiCookieAuth()\n  @Get('refresh')\n  refreshToken(@Req() request: any, @Res() response: any) {\n    const accessTokenCookie = this.authService.getCookieWithJwtAccessToken(\n      request.user.id,\n    );\n    response.setHeader('set-cookie', accessTokenCookie);\n    return response.sendStatus(200);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtRefreshStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { MailModule } from 'src/mail/mail.module';\nimport { userProviders } from 'src/user/user.provider';\nimport { UserService } from 'src/user/user.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { roleProviders } from './roles/role.provider';\nimport { JwtRefreshStrategy } from './strategies/jwt-refresh.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('jwt.accessToken.secret'),\n        signOptions: {\n          expiresIn: `${configService.get('jwt.accessToken.expires')}s`,\n        },\n      }),\n    }),\n    PassportModule,\n    MailModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    ...userProviders,\n    UserService,\n    ...roleProviders,\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshStrategy,\n  ],\n  exports: [...roleProviders, AuthService, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                getCookieWithJwtAccessToken\n                            \n                            \n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Async\n                                getRoles\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                setRoles\n                            \n                            \n                                    Async\n                                verifyAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleRepository: Repository, jwtService: JwtService, configService: ConfigService, userService: UserService, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:114\n                \n            \n\n\n            \n                \n                    Authenticates an user from given credentials and returns its user obj if successful\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the email credential of the user\n\n                                    \n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the password credential of the user (hashed)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the authenticated user object or throws exception\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:187\n                \n            \n\n\n            \n                \n                    Helper function for returning cookie strings used to replace/clear client's authentication cookies\n\n\n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        formatted cookie strings for logout\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \ngetCookieWithJwtAccessToken(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:143\n                \n            \n\n\n            \n                \n                    Creates an access_token cookie signed with given username and userId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe given userId from database of request user\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \ncookie as a string\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \ngetCookieWithJwtRefreshToken(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:164\n                \n            \n\n\n            \n                \n                    Creates a refresh_token cookie signed with a given username and userId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the given userId from database of request user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \nan object with the refresh cookie as a string and the refresh_token *\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoles(userId: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n                    Gets all the roles assigned to an user based on a given user id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        roles assigned to the user as a list of string enums\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n                    Registers new user accounts, generates 2fa codes, and sends confirmation emails\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user obj data to register\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the newly registered user obj with its database id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    setRoles(userId: any, roles: [Role])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n                    Assigns a list of one or more roles to an user based on a given user id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                                \n                                    roles\n                                    \n                                                [Role]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the list of role enums to assign to the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyAccount(code: number, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n                    Verifies new user accounts by matching a given 2fa code with the database, sends verification success email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the code to attempt to match\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to verify\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Repository } from 'typeorm';\nimport { RoleEntity } from './roles/role.entity';\nimport * as bcrypt from 'bcrypt';\nimport { UserService } from 'src/user/user.service';\nimport { Role } from './roles/role.enum';\nimport RegisterUserDto from 'src/user/dto/registerUser.dto';\nimport { MailService } from 'src/mail/mail.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject('ROLE_REPOSITORY')\n    private roleRepository: Repository,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n    private readonly mailService: MailService,\n  ) {}\n\n  /**\n   * Gets all the roles assigned to an user based on a given user id\n   * @param userId the id of the user\n   * @returns roles assigned to the user as a list of string enums\n   */\n  async getRoles(userId: any) {\n    const roles = await this.roleRepository.find({ where: { userId } });\n    if (roles.length == 0) {\n      throw new HttpException(\n        'No Privileges Found: You must first verify your account',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return roles.map((role) => role.role);\n  }\n\n  /**\n   * Assigns a list of one or more roles to an user based on a given user id\n   * @param userId the id of the user\n   * @param roles the list of role enums to assign to the user\n   */\n  async setRoles(userId: any, roles: [Role]) {\n    for (let i = 0, role = roles[i]; i  {\n    try {\n      const user = await this.userService.getOneById(userId);\n\n      if (user.authConfirmToken != code) {\n        throw new HttpException(\n          'Verification code has expired or does not match!',\n          HttpStatus.UNAUTHORIZED,\n        );\n      }\n      await this.userService.verify(user.id);\n      await this.mailService.sendConfirmedEmail(user);\n      await this.setRoles(user.id, [Role.customer]);\n    } catch (e) {\n      throw new HttpException(\n        'Failed to verify user account',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  /**\n   * Authenticates an user from given credentials and returns its user obj if successful\n   * @param email the email credential of the user\n   * @param hashedPassword the password credential of the user (hashed)\n   * @returns the authenticated user object or throws exception\n   */\n  async getAuthenticatedUser(email: string, hashedPassword: string) {\n    try {\n      const user = await this.userService.getOneByEmail(email);\n      const isPasswordMatching = await bcrypt.compare(\n        hashedPassword,\n        user.getPassword(),\n      );\n      if (!isPasswordMatching || !user.isActive) {\n        throw new HttpException(\n          'Wrong credentials provided',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  /**\n   * Creates an access_token cookie signed with given username and userId\n   * @param {number} userId - the given userId from database of request user\n   * @return {string} - cookie as a string\n   * @memberof AuthService\n   */\n\n  getCookieWithJwtAccessToken(userId: string): string {\n    const payload = { userId };\n\n    const token = this.jwtService.sign(payload, {\n      secret: Buffer.from(\n        this.configService.get('jwt.accessToken.secret'),\n        'base64',\n      ).toString(),\n      expiresIn: `${this.configService.get(\n        'jwt.accessToken.expires',\n      )}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/`;\n  }\n  /**\n   * Creates a refresh_token cookie signed with a given username and userId\n   * @param {number} userId the given userId from database of request user\n   * @return {{cookie: string, refresh_token: string}} - an object with the refresh cookie as a string and the refresh_token *\n   * @memberof AuthService\n   */\n\n  getCookieWithJwtRefreshToken(userId: string): {\n    cookie: string;\n    refresh_token: string;\n  } {\n    const payload = { userId };\n    const refresh_token = this.jwtService.sign(payload, {\n      secret: Buffer.from(\n        this.configService.get('jwt.refreshToken.secret'),\n        'base64',\n      ).toString(),\n      expiresIn: `${this.configService.get(\n        'jwt.refreshToken.expires',\n      )}s`,\n    });\n\n    const cookie = `Refresh=${refresh_token}; HttpOnly; Path=/api/auth/refresh`;\n    return { cookie, refresh_token };\n  }\n\n  /**\n   * Helper function for returning cookie strings used to replace/clear client's authentication cookies\n   * @returns formatted cookie strings for logout\n   */\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/',\n      'Refresh=; HttpOnly; Path=/api/auth/refresh',\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/createUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authConfirmToken\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authConfirmToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/createUser.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/createUser.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/createUser.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/createUser.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/createUser.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  authConfirmToken: number;\n}\n\nexport default CreateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshStrategy.html":{"url":"injectables/JwtRefreshStrategy.html","title":"injectable - JwtRefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-refresh.strategy.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt-refresh.strategy.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { UserService } from 'src/user/user.service';\nimport { UserEntity } from 'src/user/user.entity';\nimport { ConfigService } from '@nestjs/config';\n\n/** \n@export\n\n@class JutRefreshStrategy - Custom passport strategy to validate a refresh token to allow access to refreshing an expired token, * checks if refresh token is in the database and can be mapped to the request user.\n\n* @extends {PassportStrategy (Strategy, 'jwt-refresh')} extends passport strategy to add custom logic\n\n*/\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(\n    private readonly userService: UserService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      ignoreExpiration: false,\n      passReqToCallback: true,\n      secretOrKey: Buffer.from(\n        configService.get('jwt.refreshToken.secret'),\n        'base64',\n      ).toString(),\n    });\n  }\n  async validate(request: Request, payload: any): Promise {\n    const refreshToken = request.cookies?.Refresh;\n\n    const user = await this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n    if (user && user.isActive) return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                checks if access token whether from a cookie, url query param, or bearer auth header, is valid, if so return the request user object\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { UserService } from 'src/user/user.service';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n/**\n * @export\n * @class JwtStrategy - Custom passport strategy to validate an access token to allow access to authentication required endpoints,\n * checks if access token whether from a cookie, url query param, or bearer auth header, is valid, if so return the request user object\n * @extends {PassportStrategy(Strategy)} - extends passport strategy to add custom logic\n *\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly userService: UserService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        ExtractJwt.fromUrlQueryParameter('token'),\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n        ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ]),\n\n      ignoreExpiration: false,\n      secretOrKey: Buffer.from(\n        configService.get('jwt.accessToken.secret'),\n        'base64',\n      ).toString(),\n    });\n  }\n\n  async validate(payload: any) {\n    const user = await this.userService.getOneById(payload.userId);\n    if (user && user.isActive) return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UserEntity } from '../../user/user.entity';\nimport { plainToClassFromExist } from 'class-transformer';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string) {\n    return await this.authService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/loginUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'The email for the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/loginUser.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty()@Matches(/^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9]).+$/, {message: 'Password must contain at least one capital letter, one special character, and one number'})@ApiProperty({description: 'The password of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/loginUser.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class LoginUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'The email for the user' })\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty()\n  @Matches(/^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9]).+$/, {\n    message:\n      'Password must contain at least one capital letter, one special character, and one number',\n  })\n  @ApiProperty({ description: 'The password of the user' })\n  password: string;\n}\n\nexport default LoginUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { mailConfigFactory } from './mail.factory';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      imports: [],\n      useFactory: mailConfigFactory,\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendConfirmationEmail\n                            \n                            \n                                    Async\n                                sendConfirmedEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendConfirmationEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendConfirmationEmail(user: UserEntity, code: number)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:31\n                \n            \n\n\n            \n                \n                    Notifies an user via email of the confirmation code to use to verify their account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user to be verified\n\n                                    \n                                \n                                \n                                    code\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the verification code to send to the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendConfirmedEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendConfirmedEmail(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:13\n                \n            \n\n\n            \n                \n                    Notifies an user via email that their account is verified\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user that was successfully verified\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { UserEntity } from 'src/user/user.entity';\n\n@Injectable()\nexport class MailService {\n  constructor(private mailerService: MailerService) {}\n\n  /**\n   * Notifies an user via email that their account is verified\n   * @param user the user that was successfully verified\n   */\n  async sendConfirmedEmail(user: UserEntity) {\n    const { email, firstName, lastName } = user;\n    await this.mailerService.sendMail({\n      to: email,\n      subject: 'Thank you! Email Confirmed',\n      template: 'confirmed',\n      context: {\n        fullname: `${firstName} ${lastName}`,\n        email,\n      },\n    });\n  }\n\n  /**\n   * Notifies an user via email of the confirmation code to use to verify their account\n   * @param user the user to be verified\n   * @param code the verification code to send to the user\n   */\n  async sendConfirmationEmail(user: UserEntity, code: number) {\n    const { email, firstName, lastName } = await user;\n    await this.mailerService.sendMail({\n      to: email,\n      subject: 'Welcome! Please Confirm Email',\n      template: 'confirm',\n      context: {\n        fullname: `${firstName} ${lastName}`,\n        code,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/registerUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'The email for the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/registerUser.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The first name of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/registerUser.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The last name of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/registerUser.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty()@Matches(/^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9]).+$/, {message: 'Password must contain at least one capital letter, one special character, and one number'})@ApiProperty({description: 'The password of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/registerUser.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class RegisterUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'The email for the user' })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'The first name of the user' })\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'The last name of the user' })\n  lastName: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty()\n  @Matches(/^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9]).+$/, {\n    message:\n      'Password must contain at least one capital letter, one special character, and one number',\n  })\n  @ApiProperty({ description: 'The password of the user' })\n  password: string;\n}\n\nexport default RegisterUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestWithUserDto.html":{"url":"classes/RequestWithUserDto.html","title":"class - RequestWithUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestWithUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/requestWithUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/requestWithUser.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\nimport { UserEntity } from '../user.entity';\n\nexport class RequestWithUserDto {\n  @IsNotEmpty()\n  user: UserEntity;\n}\n\nexport default RequestWithUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RoleEntity.html":{"url":"entities/RoleEntity.html","title":"entity - RoleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RoleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                role\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { UserEntity } from 'src/user/user.entity';\nimport { Entity, ManyToOne, PrimaryColumn } from 'typeorm';\n\n@Entity('role')\nexport class RoleEntity {\n  @PrimaryColumn()\n  userId: number;\n\n  @PrimaryColumn()\n  role: string;\n\n  @ManyToOne(() => UserEntity, (user) => user.roles)\n  user: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/roles.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.guard.ts:25\n                \n            \n\n\n            \n                \n                    Checks if request user contains sufficient privilege to access a resource\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        execution context\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true if authorized\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { ROLES_KEY } from './roles.decorator';\nimport { AuthService } from '../auth.service';\nimport { Role } from './role.enum';\nimport {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * Checks if request user contains sufficient privilege to access a resource\n   * @param context execution context\n   * @returns true if authorized\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) return true;\n\n    const { user } = context.switchToHttp().getRequest();\n    const roles = await this.authService.getRoles(user.id);\n    const authorized = roles.some((role) =>\n      requiredRoles.includes(role as Role),\n    );\n    if (!authorized) {\n      throw new HttpException(\n        'You do not have sufficient permissions for this resource',\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    return authorized;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('user')\nexport class UserController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authConfirmToken\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                isVerified\n                            \n                            \n                                lastName\n                            \n                            \n                                    Private\n                                password\n                            \n                            \n                                    Optional\n                                roles\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authConfirmToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { RoleEntity } from 'src/auth/roles/role.entity';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  BeforeUpdate,\n  OneToMany,\n} from 'typeorm';\n\n@Entity('user')\nexport class UserEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  @Exclude()\n  private password: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ default: true })\n  @Exclude()\n  isActive: boolean;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @Column({ default: false })\n  @Exclude()\n  isVerified: boolean;\n\n  @Column({ nullable: true })\n  @Exclude()\n  authConfirmToken: number;\n\n  @Column({ nullable: true })\n  @Exclude()\n  currentHashedRefreshToken?: string;\n\n  @BeforeUpdate()\n  setUpdatedAt() {\n    this.updatedAt = new Date();\n  }\n\n  @OneToMany(() => RoleEntity, (role) => role.user)\n  @Exclude()\n  roles?: RoleEntity[];\n\n  getPassword(): string {\n    return this.password;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { UserController } from './user.controller';\nimport { userProviders } from './user.provider';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UserController],\n  providers: [...userProviders, UserService],\n  exports: [...userProviders],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getOneByEmail\n                            \n                            \n                                    Async\n                                getOneById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                updateHelper\n                            \n                            \n                                    Async\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:61\n                \n            \n\n\n            \n                \n                    Creates a new user and saves it to the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user data obj to save\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the created user with its database id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:40\n                \n            \n\n\n            \n                \n                    Gets an user from a given email, throws exception if not found\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the email as a string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the user obj as UserEntity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOneById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:19\n                \n            \n\n\n            \n                \n                    Gets an user from a given userId, throws exception if not found\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the userId as a string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the user obj as UserEntity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: any, userId: any)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:97\n                \n            \n\n\n            \n                \n                    Gets an user obj if the given refresh token matches the user's current one\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the refresh token to check if matches\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to check\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the user obj from the given id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:72\n                \n            \n\n\n            \n                \n                    Updates the current refresh token column of user entities\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new refresh token to update to old with\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the updated user obj\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        updateHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHelper(userId: string, updates: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:119\n                \n            \n\n\n            \n                \n                    activates before update database trigger for typeorm so that updatedAt field can be set\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to update\n\n                                    \n                                \n                                \n                                    updates\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the json object with fields of which are to be updated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated entity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verify\n                        \n                    \n                \n            \n            \n                \n                    \n                    verify(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:84\n                \n            \n\n\n            \n                \n                    Verifies an user's account by setting their isVerified flag to true\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to verify\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the updated user obj\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { UserEntity } from './user.entity';\nimport * as bcrypt from 'bcrypt';\nimport CreateUserDto from './dto/createUser.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @Inject('USER_REPOSITORY')\n    private userRepository: Repository,\n  ) {}\n\n  /**\n   * Gets an user from a given userId, throws exception if not found\n   * @param userId the userId as a string\n   * @returns the user obj as UserEntity\n   */\n  async getOneById(userId: string) {\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: {\n        roles: true,\n      },\n    });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this id does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  /**\n   * Gets an user from a given email, throws exception if not found\n   * @param email the email as a string\n   * @returns the user obj as UserEntity\n   */\n  async getOneByEmail(email: string) {\n    const user = await this.userRepository.findOne({\n      where: { email },\n      relations: {\n        roles: true,\n      },\n    });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  /**\n   * Creates a new user and saves it to the database\n   * @param userData the user data obj to save\n   * @returns the created user with its database id\n   */\n  async create(userData: CreateUserDto) {\n    const newUser = this.userRepository.create(userData);\n    return await this.userRepository.save(newUser);\n  }\n\n  /**\n   * Updates the current refresh token column of user entities\n   * @param refreshToken the new refresh token to update to old with\n   * @param userId the id of the user to update\n   * @returns the updated user obj\n   */\n  async setCurrentRefreshToken(refreshToken: string, userId: string) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    return this.updateHelper(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  /**\n   * Verifies an user's account by setting their isVerified flag to true\n   * @param userId the id of the user to verify\n   * @returns the updated user obj\n   */\n  async verify(userId: string) {\n    return await this.updateHelper(userId, {\n      authConfirmToken: undefined,\n      isVerified: true,\n    });\n  }\n\n  /**\n   * Gets an user obj if the given refresh token matches the user's current one\n   * @param refreshToken the refresh token to check if matches\n   * @param userId the id of the user to check\n   * @returns the user obj from the given id\n   */\n  async getUserIfRefreshTokenMatches(\n    refreshToken: any,\n    userId: any,\n  ): Promise {\n    const user = await this.getOneById(userId);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken,\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  /**\n   * activates before update database trigger for typeorm so that updatedAt field can be set\n   * @param userId the id of the user to update\n   * @param updates the json object with fields of which are to be updated\n   * @returns updated entity\n   */\n  private async updateHelper(userId: string, updates: {}) {\n    const foundEntity = await this.userRepository.findOne({\n      where: { id: userId },\n    });\n    return await this.userRepository.save(Object.assign(foundEntity, updates));\n  }\n\n  async removeRefreshToken(userId: string) {\n    return this.updateHelper(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyUserDto.html":{"url":"classes/VerifyUserDto.html","title":"class - VerifyUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/VerifyAccount.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()@ApiProperty({description: 'The secure code sent to the request user's email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/VerifyAccount.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The id of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/VerifyAccount.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsNotEmpty, IsString } from 'class-validator';\n\nexport class VerifyUserDto {\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: \"The secure code sent to the request user's email address\",\n  })\n  code: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'The id of the user' })\n  userId: string;\n}\n\nexport default VerifyUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                config/configuration.ts\n            \n            variable\n            YAML_CONFIG_FILENAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/allExceptionsFilter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/auth/dto/VerifyAccount.dto.ts\n            \n            class\n            VerifyUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/roles/role.entity.ts\n            \n            entity\n            RoleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/role.provider.ts\n            \n            variable\n            roleProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exceptionFilter.provider.ts\n            \n            variable\n            exceptionFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/mail.factory.ts\n            \n            variable\n            mailConfigFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/createUser.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/loginUser.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/registerUser.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dto/requestWithUser.dto.ts\n            \n            class\n            RequestWithUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.provider.ts\n            \n            variable\n            userProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                70 %\n                (7/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/passport : ^9.0.1\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            @types/bcrypt : ^5.0.0\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            hbs : ^4.2.0\n        \n            js-yaml : ^4.1.0\n        \n            morgan : ^1.10.0\n        \n            mysql2 : ^2.3.3\n        \n            nodemailer : ^6.9.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/roles/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 customer\n                            \n                        \n                        \n                            \n                                Value : customer\n                            \n                        \n                        \n                            \n                                 owner\n                            \n                        \n                        \n                            \n                                Value : owner\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\nAppModule -->\n\nJwtStrategy->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            exceptionFilter   (src/.../exceptionFilter.provider.ts)\n                        \n                        \n                            mailConfigFactory   (src/.../mail.factory.ts)\n                        \n                        \n                            roleProviders   (src/.../role.provider.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            userProviders   (src/.../user.provider.ts)\n                        \n                        \n                            YAML_CONFIG_FILENAME   (config/.../configuration.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/database.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'DATA_SOURCE',\n    inject: [ConfigService],\n    useFactory: async (configService: ConfigService) => {\n      const dataSource = new DataSource({\n        type: 'mysql',\n        host: configService.get('db.mysql.host'),\n        port: configService.get('db.mysql.port'),\n        username: configService.get('db.mysql.username'),\n        password: configService.get('db.mysql.password'),\n        database: 'ecom',\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: true,\n      });\n\n      return dataSource.initialize();\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/exceptionFilter.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        exceptionFilter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'APP_FILTER',\n    useClass: AllExceptionsFilter,\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/mail/mail.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mailConfigFactory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  configService: ConfigService,\n): MailerOptions => {\n  return {\n    transport: {\n      rejectUnauthorized: false,\n      service: 'gmail',\n      secure: false, // in prod remove this\n      auth: {\n        user: configService.get('mail.email'),\n        pass: configService.get('mail.password'),\n      },\n      tls: {\n        rejectUnauthorized: false, //in prod remove this\n      },\n    },\n    defaults: {\n      from: `\"No Reply\" ('mail.from')}>`,\n    },\n    template: {\n      dir: path.join(__dirname, '../../../src/mail/templates'),\n      adapter: new HandlebarsAdapter(),\n      options: {\n        strict: true,\n      },\n    },\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/roles/role.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roleProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'ROLE_REPOSITORY',\n    useFactory: (dataSource: DataSource) =>\n      dataSource.getRepository(RoleEntity),\n    inject: ['DATA_SOURCE'],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/auth/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/user/user.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'USER_REPOSITORY',\n    useFactory: (dataSource: DataSource) =>\n      dataSource.getRepository(UserEntity),\n    inject: ['DATA_SOURCE'],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    config/configuration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        YAML_CONFIG_FILENAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'config.yaml'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
